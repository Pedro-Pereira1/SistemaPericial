package org.engcia;

import org.engcia.model.AlertResponse
import org.engcia.Utils.Question
import org.engcia.model.EvidencesNUA
import org.engcia.model.EvidencesSLA
import org.engcia.model.EvidencesPhishing
import org.engcia.model.EvidencesMLF
import java.util.Arrays
import org.engcia.model.Conclusion
import java.util.ArrayList
import org.engcia.model.Evidences;
import java.util.Map
global java.util.Map explanationMap;

query "AlertResponse"
    $response : AlertResponse()
end

//================================================================================================
// Phishing Alert Detection Rule Set

rule "Start Analysis for Phishing Alert"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "null", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the email already quarantined or blocked by security controls?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "emailQuarantined",
                                             "Determining if security controls have already acted on the email to prevent further spread or harm."
                                             );
    insert(output);
end

rule "Step 1: Email Quarantined"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "yes", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The email has been quarantined, so no further action is required. Classify as a false positive."
                                             );
    insert(output);
end

rule "Step 1: Email Not Quarantined, Analyze Content"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Does the email contain suspicious content (malicious links/attachments)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "suspiciousContent",
                                             "Check if the email contains indicators of phishing, such as malicious links or attachments."
                                             );
    insert(output);
end

rule "Step 2: Suspicious Content Detected"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", emailLegit == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Did any user interact with the email (clicked link, opened attachment)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userClicked",
                                             "Determine if the user has engaged with potential phishing content, which could lead to compromise."
                                             );
    insert(output);
end

rule "Step 2: No Suspicious Content, Check Email Legitimacy"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "no", emailLegit == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the email legitimate (verified domain, sender, etc.)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "emailLegit",
                                             "Validate the sender's legitimacy to determine if this is a false alarm or actual phishing."
                                             );
    insert(output);
end

rule "Step 3: Legitimate Email"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", emailLegit == "yes", suspiciousContent == "no", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The email has been verified as legitimate, classify as a false positive."
                                             );
    insert(output);
end

rule "Step 3: User Clicked Link or Opened Attachment"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Has the user's password been reset and tokens revoked?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "responseRequired",
                                             "If the user interacted with malicious content, confirm if immediate remedial actions have been taken."
                                             );
    insert(output);
end

rule "Step 4: Reset Password and Revoke Tokens"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESET_PASSWORD_REVOKE_TOKENS),
                                             $input,
                                             "conclusion",
                                             "Since the user interacted with a phishing email, reset their password and revoke tokens to prevent further damage."
                                             );
    insert(output);
end

rule "Step 4: Password Already Reset, Mark as Resolved"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESOLVE_ALERT),
                                             $input,
                                             "conclusion",
                                             "The user's password has already been reset, so mark the alert as resolved."
                                             );
    insert(output);
end

rule "Step 5: No Interaction, Notify User for Education"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "no", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.EDUCATE_USER),
                                             $input,
                                             "conclusion",
                                             "No user interaction detected. Notify the user to educate them about phishing threats."
                                             );
    insert(output);
end

rule "Step 6: Suspicious Content but No User Interaction, Block and Monitor"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "no", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.BLOCK_SENDER_MONITOR),
                                             $input,
                                             "conclusion",
                                             "Even though there was no user interaction, block the sender and monitor for further malicious activity."
                                             );
    insert(output);
end

rule "Step 7: No Suspicious Content, Mark as False Positive"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "no", emailLegit == "no", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "No suspicious content detected and the email is not legitimate. Classify as a false positive."
                                             );
    insert(output);
end

//================================================================================================

//================================================================================================
// Simultaneous Logins Activity

rule "Start Analysis for Multiple Simultaneous Logins"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "null", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is there a simultaneous login from multiple locations/IPs (>3)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "multipleLocations",
                                             "This question checks if multiple login attempts from different locations could indicate a potential compromise.");
    insert(output);
end

rule "Step 1: Check if there are logins from multiple locations"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Can the login be explained by legitimate user behavior (VPN, travel, etc.)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "legitimateBehavior",
                                             "We need to understand if the simultaneous logins can be attributed to normal user behavior.");
    insert(output);
end

rule "Step 1: No simultaneous logins, check for anomalies"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is there another abnormal pattern?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "abnormalPattern",
                                             "This question checks for other abnormal patterns, which may indicate a security issue even if multiple logins are not present.");
    insert(output);
end

rule "Step 2: Multiple IP locations, classify as false positive"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "yes", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The login is explained by legitimate behavior, thus it can be classified as a false positive.");
    insert(output);
end

rule "Step 2: Abnormal pattern detected, notify support team"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "yes", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.NOTIFY_SUPPORT_TEAM),
                                             $input,
                                             "conclusion",
                                             "An abnormal pattern has been detected, which requires the attention of the support team.");
    insert(output);
end

rule "Step 2: No multiple IP locations, false positive"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "no", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Since there are no abnormal patterns or multiple IP locations, classify this as a false positive.");
    insert(output);
end

rule "Step 3: Simultaneous logins explained by legitimate behavior"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Temporarily suspend the account\nDoes the user have MFA activated?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "mfaEnabled",
                                             "Since legitimate behavior can't explain the logins, it's critical to determine if MFA is enabled for additional security.");
    insert(output);
end

rule "Step 4: Does the user have MFA enabled?"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "yes", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Can login be immediately validated by contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "To prevent unnecessary lockout, we need to check if the login can be verified directly with the user.");
    insert(output);
end

rule "Step 4.2: Does the user have MFA enabled?"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "no", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Enforce MFA\nCan login be immediately validated by contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
    insert(output);
end

rule "Step 5: User contacted, validate login"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", (mfaEnabled == "yes" || mfaEnabled == "no"), userContacted == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.REVERSE_TRANSACTION),
                                             $input,
                                             "conclusion",
                                             "The user confirmed the login, so the previous security actions (e.g., suspension) can be reversed.");
    insert(output);
end

rule "Step 5.2: User contacted, validate login"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", (mfaEnabled == "yes" || mfaEnabled == "no"), userContacted == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESET_PASSWORD_REVOKE_TOKENS),
                                             $input,
                                             "conclusion",
                                             "If the user can't validate the login, reset the password and revoke tokens to protect the account.");
    insert(output);
end
//================================================================================================
//Multiple login failures for a single account
rule "MLF.1. Is the user known"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="null", was_the_user_1=="null", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the user known?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $inputMLF,
                                             "user_known_1",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
    insert(output);
end

rule "MLF.2. Is the user known"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1 == "yes", was_the_user_1=="null", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Foi o utilizador?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $inputMLF,
                                             "user_known_1",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
    insert(output);
end

rule "MLF.3. First False Positive"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="yes", was_the_user_1=="yes", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.REVERSE_TRANSACTION),
                                             $inputMLF,
                                             "conclusion",
                                             "The user confirmed the login, so the previous security actions (e.g., suspension) can be reversed.");
    insert(output);
end

rule "MLF.4. First False Positive"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="yes", was_the_user_1=="no", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.REVERSE_TRANSACTION),
                                             $inputMLF,
                                             "conclusion",
                                             "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
    insert(output);
end

rule "MLF.5. First False Positive"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "São múltiplos IPs?",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "are_there_multiple_ips",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

//================================================================================================
//Changes made to the firewall


//================================================================================================
//New user account
rule "Step 1 - Start Analysis for New user account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "null", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the Username in permitted access list?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "permittedUser",
                                             "???"
                                             );
    insert(output);
end

rule "Step 2 - Username in permitted access list"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "yes", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the Username in permitted access list?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "???"
                                             );
    insert(output);
end

rule "Step 3 - Contact User"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "yes", userContacted == "yes", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The new user account was created according policies and the user was contacted with success, thus it can be classified as a false positive.");
    insert(output);
end


rule "Step 4 - Created according policies"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the Username in permitted access list?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "accordingPolicy",
                                             "???"
                                             );
    insert(output);
end

rule "Step 5 - Created according policies"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "yes", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The new user account was not in permitted list but it was created according policies and the user was contacted with success, thus it can be classified as a false positive.");
    insert(output);
end

rule "Step 6 - Created according policies"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Revoke access Privileges\n" +
                                                           "Contact customer, is the problem resolved?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userResponse",
                                             "???"
                                             );
    insert(output);
end

rule "Step 7 - Contact customer"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "yes", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Warn customer to avoid future cases.");
    insert(output);
end

rule "Step 8 - Deactivate account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Deactivate account\n" +
                                                           "Contact customer, is the problem resolved?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userProblemResolved",
                                             "???"
                                             );
    insert(output);
end

rule "Step 8 - Deactivate account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Verify and modify new user account policies as necessary to prevent new cases.");
    insert(output);
end


rule "Step 8 - Eliminate account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Eliminate Account completely. " +
                                              "\nVerify and modify new user account policies as necessary to prevent new cases.");
    insert(output);
end

//================================================================================================
//User data has been changed


//================================================================================================

rule "Default: Unknown response or invalid step"
when
    not EvidencesSLA()
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.UNKNOWN),
                                             null,
                                             "conclusion",
                                             "The response provided is invalid or the step is unknown. Please try again.");
    insert(output);
end