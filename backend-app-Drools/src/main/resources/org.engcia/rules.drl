package org.engcia;

import org.engcia.model.AlertResponse
import org.engcia.Utils.Question
import org.engcia.model.EvidencesNUA
import org.engcia.model.EvidencesSLA
import org.engcia.model.EvidencesPhishing
import org.engcia.model.EvidencesMLF
import org.engcia.model.EvidencesCMF
import org.engcia.model.EvidencesUDC
import java.util.Arrays
import org.engcia.model.Conclusion
import java.util.ArrayList
import org.engcia.model.Evidences;
import java.util.Map
import javax.validation.constraints.Null
import java.lang.reflect.Array
global java.util.Map explanationMap;

query "AlertResponse"
    $response : AlertResponse()
end

//================================================================================================
// Phishing Alert Detection Rule Set

rule "Start Analysis for Phishing Alert"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "null", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the email already quarantined or blocked by security controls?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "emailQuarantined",
                                             "Determining if security controls have already acted on the email to prevent further spread or harm."
                                             );
    insert(output);
end

rule "Step 1: Email Quarantined"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "yes", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The email has been quarantined, so no further action is required. Classify as a false positive."
                                             );
    insert(output);
end

rule "Step 1: Email Not Quarantined, Analyze Content"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", emailLegit == "null", suspiciousContent == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Does the email contain suspicious content (malicious links/attachments)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "suspiciousContent",
                                             "Check if the email contains indicators of phishing, such as malicious links or attachments."
                                             );
    insert(output);
end

rule "Step 2: Suspicious Content Detected"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", emailLegit == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Did any user interact with the email (clicked link, opened attachment)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userClicked",
                                             "Determine if the user has engaged with potential phishing content, which could lead to compromise."
                                             );
    insert(output);
end

rule "Step 2: No Suspicious Content, Check Email Legitimacy"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "no", emailLegit == "null", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the email legitimate (verified domain, sender, etc.)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "emailLegit",
                                             "Validate the sender's legitimacy to determine if this is a false alarm or actual phishing."
                                             );
    insert(output);
end

rule "Step 3: Legitimate Email"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", emailLegit == "yes", suspiciousContent == "no", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The email has been verified as legitimate, classify as a false positive."
                                             );
    insert(output);
end

rule "Step 3: User Clicked Link or Opened Attachment"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Has the user's password been reset and tokens revoked?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "responseRequired",
                                             "If the user interacted with malicious content, confirm if immediate remedial actions have been taken."
                                             );
    insert(output);
end

rule "Step 4: Reset Password and Revoke Tokens"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESET_PASSWORD_REVOKE_TOKENS),
                                             $input,
                                             "conclusion",
                                             "Since the user interacted with a phishing email, reset their password and revoke tokens to prevent further damage."
                                             );
    insert(output);
end

rule "Step 4: Password Already Reset, Mark as Resolved"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "yes", responseRequired == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESOLVE_ALERT),
                                             $input,
                                             "conclusion",
                                             "The user's password has already been reset, so mark the alert as resolved."
                                             );
    insert(output);
end

rule "Step 5: No Interaction, Notify User for Education"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "no", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.EDUCATE_USER),
                                             $input,
                                             "conclusion",
                                             "No user interaction detected. Notify the user to educate them about phishing threats."
                                             );
    insert(output);
end

rule "Step 6: Suspicious Content but No User Interaction, Block and Monitor"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "yes", userClicked == "no", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.BLOCK_SENDER_MONITOR),
                                             $input,
                                             "conclusion",
                                             "Even though there was no user interaction, block the sender and monitor for further malicious activity."
                                             );
    insert(output);
end

rule "Step 7: No Suspicious Content, Mark as False Positive"
when
    $input: EvidencesPhishing(alertId == "Phishing", emailQuarantined == "no", suspiciousContent == "no", emailLegit == "no", userClicked == "null", responseRequired == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "No suspicious content detected and the email is not legitimate. Classify as a false positive."
                                             );
    insert(output);
end

//================================================================================================

//================================================================================================
// Simultaneous Logins Activity

rule "Start Analysis for Multiple Simultaneous Logins"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "null", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nIs there a simultaneous login from multiple locations/IPs (>3)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "multipleLocations",
                                             "Detecting logins from multiple locations or IPs helps identify potential unauthorized access attempts, as legitimate users typically do not log in from multiple disparate locations at the same time.");
    insert(output);
end

rule "Simultaneous logins, check if there are logins from multiple locations"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nCan the login be explained by legitimate user behavior (VPN, travel, etc.)?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "legitimateBehavior",
                                             "It's essential to determine if unusual login patterns can be justified by legitimate reasons like VPN usage or travel, as these could account for seemingly suspicious activity.");
    insert(output);
end

rule "No simultaneous logins, check for anomalies"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nIs there another abnormal pattern?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "abnormalPattern",
                                             "This question checks for other abnormal patterns, such as login times or unusual behavior post-login, can reveal subtle signs of compromised accounts or malicious activity.");
    insert(output);
end

rule "Login explained by legitime behaviour, classify as false positive"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "yes", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The login is explained by legitimate behavior, thus it can be classified as a false positive.");
    insert(output);
end

rule "Abnormal pattern detected, notify support team"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "yes", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.NOTIFY_SUPPORT_TEAM),
                                             $input,
                                             "conclusion",
                                             "An abnormal pattern has been detected, which requires the attention of the support team.");
    insert(output);
end

rule "No multiple IP locations, false positive"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "no", legitimateBehavior == "null", abnormalPattern == "no", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Since there are no abnormal patterns or multiple IP locations, classify this as a false positive.");
    insert(output);
end

rule "Simultaneous logins not explained by legitimate behavior, do account suspension and check Multi-factor authentication"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "null", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nTemporarily suspend the account\nDoes the user have MFA activated?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "mfaEnabled",
                                             "Temporarily suspending the account prevents further unauthorized access while the suspicious activity is investigated, mitigating potential damage.\n" +
                                             "Since legitimate behavior can't explain the logins, it's critical to determine if MFA is enabled as it significantly enhances account security, making it harder for attackers to access the account even if credentials are compromised.");
    insert(output);
end

rule "User have Multi-factor authentication, validate activity with the user"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "yes", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nCan login be immediately validated by contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "To prevent unnecessary lockout, we need to check if the login can be verified directly with the user.");
    insert(output);
end

rule "User don´t have Multi-factor authentication, enforce MFA and validate activity with the user"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", mfaEnabled == "no", userContacted == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nEnforce MFA\nCan login be immediately validated by contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user. Enforcing MFA adds an additional security layer, ensuring that future logins are protected, even if credentials are leaked or guessed.\n" +
                                             "Immediate validation through the user helps confirm whether the activity is legitimate, ensuring quick resolution or further investigation if unauthorized.");
    insert(output);
end

rule "User contacted, user confirmed login, reverse previous security actions"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", (mfaEnabled == "yes" || mfaEnabled == "no"), userContacted == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.REVERSE_TRANSACTION),
                                             $input,
                                             "conclusion",
                                             "The user confirmed the login, so the previous security actions (e.g., suspension) can be reversed.");
    insert(output);
end

rule "User contacted, user don´t confirmed the login, reset password and revoke tokens to protect the account"
when
    $input: EvidencesSLA(alertId == "SLA", multipleLocations == "yes", legitimateBehavior == "no", abnormalPattern == "null", (mfaEnabled == "yes" || mfaEnabled == "no"), userContacted == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.RESET_PASSWORD_REVOKE_TOKENS),
                                             $input,
                                             "conclusion",
                                             "If the user can't validate the login, reset the password and revoke tokens to protect the account.");
    insert(output);
end
//================================================================================================
//Multiple login failures for a single account
rule "MLF.1. Is the user known"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="null", was_the_user_1=="null", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the user known?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $inputMLF,
                                             "user_known_1",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
    insert(output);
end

rule "MLF.2. Is the user known"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1 == "yes", was_the_user_1=="null", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Was the action made by the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $inputMLF,
                                             "user_known_1",
                                             "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
    insert(output);
end

rule "MLF.3. First False Positive"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="yes", was_the_user_1=="yes", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $inputMLF,
                                             "conclusion",
                                             "The user confirmed the login, so the previous security actions (e.g., suspension) can be reversed.");
    insert(output);
end

rule "MLF.4"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="yes", was_the_user_1=="no", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.BLOCK_TEMP),
                                             $inputMLF,
                                             "conclusion",
                                             "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
    insert(output);
end

rule "MLF.5"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="null", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "Were there many IPs??",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "are_there_multiple_ips",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

rule "MLF.6"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "Does the IPs ammount make sense",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "does_the_number_of_ips_make_sense",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

rule "MLF.7"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "Is recurrence justifiable?",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "is_the_reccurence_just",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

rule "MLF.8"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="yes", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "Is the user known?",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "user_known_2",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

rule "MLF.9"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="yes", user_known_2=="yes", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
    AlertResponse output = new AlertResponse("question",
                                                 new Question("multiple-choice",
                                                              "Is the origin of the IPs justifiable?",
                                                              Arrays.asList("Yes", "No")),
                                                 null,
                                                 $inputMLF,
                                                 "origins_just",
                                                 "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
        insert(output);
end

rule "MLF.10"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="yes", user_known_2=="yes", was_the_user_2=="null", origins_just=="yes", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                                 null,
                                                 new Conclusion(Conclusion.CLASSIFY_FP),
                                                 $inputMLF,
                                                 "conclusion",
                                                 "Falso Positivo");
        insert(output);
end


rule "MLF.11"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="yes", user_known_2=="yes", was_the_user_2=="null", origins_just=="no", national_ip=="null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                                 null,
                                                 new Conclusion(Conclusion.BLOCK_TEMP),
                                                 $inputMLF,
                                                 "conclusion",
                                                 "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
        insert(output);
end

rule "MLF.12"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="yes", user_known_2=="no", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                     null,
                                                     new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                                     $inputMLF,
                                                     "conclusion",
                                                     "Bloquear a conta.");
    insert(output);
end

rule "MLF.13"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="no", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Is the user known?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "user_known_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.14"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="no", user_known_2=="yes", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Was it the user?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "was_the_user_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.15"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="no", user_known_2=="yes", was_the_user_2=="yes", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.CLASSIFY_FP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Falso Positivo");
     insert(output);
end

rule "MLF.16"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="no", user_known_2=="yes", was_the_user_2=="no", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.BLOCK_TEMP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
    insert(output);
end

rule "MLF.17"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="yes", is_the_reccurence_just=="no", user_known_2=="no", was_the_user_2=="no", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                     null,
                                                     new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                                     $inputMLF,
                                                     "conclusion",
                                                     "Bloquear a conta.");
    insert(output);
end

rule "MLF.18"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="no", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Open case\nIdentify the user\nIs the user known?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "user_known_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.19"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="no", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Was it the user?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "was_the_user_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.20"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="no", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="yes", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.CLASSIFY_FP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Falso Positivo");
     insert(output);
end

rule "MLF.21"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="no", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="no", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.BLOCK_TEMP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
    insert(output);
end

rule "MLF.22"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="yes", does_the_number_of_ips_make_sense=="no", is_the_reccurence_just=="null", user_known_2=="no", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                     null,
                                                     new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                                     $inputMLF,
                                                     "conclusion",
                                                     "Bloquear a conta.");
    insert(output);
end

rule "MLF.23"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="null")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Is the IP national?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "national_ip",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.24"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="yes")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Is the user known?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "user_known_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.25"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="null", origins_just=="null", national_ip=="yes")
then
     AlertResponse output = new AlertResponse("question",
                                                      new Question("multiple-choice",
                                                                   "Was it the user?",
                                                                   Arrays.asList("Yes", "No")),
                                                      null,
                                                      $inputMLF,
                                                      "was_the_user_2",
                                                      "If MFA is not already enabled, enforcing MFA is crucial to securing the account while trying to validate the login with the user.");
     insert(output);
end

rule "MLF.26"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="yes", origins_just=="null", national_ip=="yes")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.CLASSIFY_FP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Falso Positivo");
     insert(output);
end

rule "MLF.27"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="yes", was_the_user_2=="no", origins_just=="null", national_ip=="yes")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                      null,
                                                      new Conclusion(Conclusion.BLOCK_TEMP),
                                                      $inputMLF,
                                                      "conclusion",
                                                      "Bloquear a conta temporariamente\nRedefinir a password\nRever os controlos e permissões\nImplementar mecanismos de autenticação mais fortes");
    insert(output);
end

rule "MLF.28"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="no", was_the_user_2=="null", origins_just=="null", national_ip=="yes")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                     null,
                                                     new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                                     $inputMLF,
                                                     "conclusion",
                                                     "Bloquear a conta.");
    insert(output);
end

rule "MLF.29"
when
    $inputMLF: EvidencesMLF(alertId == "MLF", user_known_1=="no", was_the_user_1=="null", are_there_multiple_ips=="no", does_the_number_of_ips_make_sense=="null", is_the_reccurence_just=="null", user_known_2=="null", was_the_user_2=="null", origins_just=="null", national_ip=="no")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                     null,
                                                     new Conclusion(Conclusion.REVERSE_TRANSACTION),
                                                     $inputMLF,
                                                     "conclusion",
                                                     "Abrir caso\nBloquear o IP.");
    insert(output);
end

//================================================================================================
//Changes made to the firewall
rule "Start Analysis for Changes made to the Firewall Alert"
when
    $input: EvidencesCMF(alertId == "CMF", changesFirewall == "null", suspActivity == "null", activityType == "null" , vulnerabExploited == "null")
then
    AlertResponse output = new AlertResponse("question",new Question("multiple-choice",
                                             "Changes made to the firewall ?",Arrays.asList("Yes","No"))
                                             ,null
                                             ,$input
                                             ,"changesFirewall",
                                             "Determining if changes have been made to the firewall");
    insert(output);
    end

rule "1.Changes not made to the firewall"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="no",suspActivity=="null",activityType=="null",vulnerabExploited=="null")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.ALTERATION_NOT_DETECTED)
                                             ,$input
                                             ,"changesFirewall"
                                             ,"Determining if changes have been made to the firewall");
    insert(output);
    end
rule"1.1 Changes made to the firewall"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="null",activityType=="null",vulnerabExploited=="null")
then
    AlertResponse output = new AlertResponse("question"
                                             ,new Question("multiple-choice","Is the activity suspicious?"
                                             ,Arrays.asList("Yes","No"))
                                             ,null
                                             ,$input
                                             ,"suspActivity"
                                             ,"Changes made to the firewall, analyze logs for suspicious activity");
    insert(output);
    end
rule "2 Suspicious activity detected"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="null",vulnerabExploited=="null")
then
     AlertResponse output = new AlertResponse("question"
                                                 ,new Question("list-question","Type of activity detected?"
                                                 ,Arrays.asList("Malicious activity","Security incident", "Misconfiguration"))
                                                 ,null
                                                 ,$input
                                                 ,"activityType"
                                                 ,"Type of activity detected");
    insert(output);
    end
rule"2.1 No suspicious activity detected"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="no",activityType=="null",vulnerabExploited=="null")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.LEGIT_ALTERATION)
                                             ,$input
                                             ,"suspActivity"
                                             ,"Legitimate alteration detected, no suspicious activity");
    insert(output);
    end


rule "3 Malicious activity detected"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="malicious activity",vulnerabExploited=="null")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.APPLY_RECOMMENDATIONS+Conclusion.PREVENTIVE_MEASURES)
                                             ,$input
                                             ,"conclusion"
                                             ,"Malicious activity detected,  apply security recommendations");
    insert(output);
    end
rule "3 Security incident detected"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="security incident",vulnerabExploited=="null")
then
     AlertResponse output = new AlertResponse("question"
                                                 ,new Question("multiple-choice","Was a vulnerability exploited?"
                                                 ,Arrays.asList("Yes","No"))
                                                 ,null
                                                 ,$input
                                                 ,"vulnerabExploited"
                                                 ,"Vulnerability exploited?");
    insert(output);
    end


rule "3.1 Security incidente detected and vulnerability exploited"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="security incident",vulnerabExploited=="yes")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.MITIGATE_VULNERABILITY+Conclusion.APPLY_RECOMMENDATIONS+Conclusion.PREVENTIVE_MEASURES)
                                             ,$input
                                             ,"conclusion"
                                             ,"Mitigate the vulnerability exploited\nApply security recommendations");
    insert(output);
    end

rule "3.2 Security incidente detected and vulnerability not exploited"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="security incident",vulnerabExploited=="no")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.APPLY_RECOMMENDATIONS+Conclusion.PREVENTIVE_MEASURES)
                                             ,$input
                                             ,"conclusion"
                                             ,"No vulnerability exploited, apply security recommendations");
    insert(output);
    end
rule "3.3 Misconfiguration detected"
when
    $input: EvidencesCMF(alertId =="CMF",changesFirewall=="yes",suspActivity=="yes",activityType=="misconfiguration",vulnerabExploited=="null")
then
    AlertResponse output = new AlertResponse("conclusion"
                                             ,null
                                             ,new Conclusion(Conclusion.REVERT_SETTINGS+Conclusion.PREVENTIVE_MEASURES)
                                             ,$input
                                             ,"conclusion"
                                             ,"Misconfiguration detected, revert firewall configurations");
    insert(output);
    end

//================================================================================================
//New user account
rule "Step 1 - Start Analysis for New user account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "null", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Is the Username in permitted access list?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "permittedUser",
                                             "Select the appropriate response.");
    insert(output);
end

rule "Step 2 - Username in permitted access list"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "yes", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Was the user successfully contacted?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userContacted",
                                             "Select the appropriate response.");
    insert(output);
end

rule "Step 3 - Contact User"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "yes", userContacted == "yes", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "The user account was successfully contacted and is permitted, classify as false positive.");
    insert(output);
end

rule "Step 4 - Failed Contact"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "yes", userContacted == "no", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("action",
                                             null,
                                             new Conclusion(Conclusion.CONTACT_SUPPORT),
                                             $input,
                                             "conclusion",
                                             "Contact support team for further investigation.");
    insert(output);
end

rule "Step 5 - Account Creation Policy Check"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "null", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Was the account created according to policy, with no signs of suspicious activity?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "accordingPolicy",
                                             "Select the appropriate response.");
    insert(output);
end

rule "Step 6 - Account Creation Policy Valid"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "yes", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Account is compliant with policy; classify as false positive.");
    insert(output);
end

rule "Step 7 - Revoke Access Privileges"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "null", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Revoke access privileges. Has the issue been resolved after contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userResponse",
                                             "Select the appropriate response.");
    insert(output);
end

rule "Step 8 - Issue Resolved After Revocation"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "yes", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.EDUCATE_USER),
                                             $input,
                                             "conclusion",
                                             "Educate the user to prevent future incidents.");
    insert(output);
end

rule "Step 9 - Deactivate Account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "Deactivate account. Has the issue been resolved after contacting the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userProblemResolved",
                                             "Select the appropriate response.");
    insert(output);
end

rule "Step 10 - Issue Resolved After Deactivation"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.VERIFY_POLICIES),
                                             $input,
                                             "conclusion",
                                             "Verify and adjust account creation policies to prevent recurrence.");
    insert(output);
end

rule "Step 11 - Eliminate Account"
when
    $input: EvidencesNUA(alertId == "NUA", permittedUser == "no", userContacted == "null", accordingPolicy == "no", userResponse == "no", userProblemResolved == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.ELIMINATE_ACCOUNT),
                                             $input,
                                             "conclusion",
                                             "Eliminate the account and all associated data. Verify and modify account creation policies.");
    insert(output);
end

//================================================================================================
//User data has been changed

// Start of the Analysis for "UDC" Alert
rule "Start Analysis for User data has been changed Alert"
when
    $input: EvidencesUDC(alertId == "UDC", userKnown == "null", legitimateAction == "null", ipCollected == "null", helpdeskVerified == "null", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nDoes the analyst know the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "userKnown",
                                             "This step checks if the analyst is familiar with the user, which could help in verifying the legitimacy of the action.");
    insert(output);
end

// Analyst knows user, verify legitimacy with user
rule "Analyst knows user, verify legitimacy with user"
when
    $input: EvidencesUDC(alertId == "UDC", userKnown == "yes", legitimateAction == "null", ipCollected == "null", helpdeskVerified == "null", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nWas the action taken by the user?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "legitimateAction",
                                             "Confirming the legitimacy of the action with the user helps determine if this is a genuine alert or a false positive.");
    insert(output);
end

// Legitimate action by user, classify as false positive
rule "Legitimate action by user, classify as false positive"
when
    $input: EvidencesUDC(alertId == "UDC", userKnown == "yes", legitimateAction == "yes", ipCollected == "null", helpdeskVerified == "null", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Since the action was verified as legitimate by the user, classify this as a false positive.");
    insert(output);
end

// Analyst does not know user, collect IP and identify change
rule "Analyst does not know user, collect IP and identify change"
when
    $input: EvidencesUDC(alertId == "UDC", userKnown != "null", legitimateAction != "yes", ipCollected == "null", helpdeskVerified == "null", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("ip-quest",
                                                          "\nProceed to collect the IP address associated with the change?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "ipCollected",
                                             "Since the user is not known, proceed with collecting the IP address associated with the change to further investigate.");
    insert(output);
end

// IP collected, open case and temporarily block account
rule "Check if user is verified by Helpdesk"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "yes", helpdeskVerified == "null", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nOpen a case, temporarily block the account, and revoke privileges.\n" +
                                                           "Is the user recognized by the Helpdesk? ",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "helpdeskVerified",
                                             "Open a case, temporarily block the account, and revoke privileges for security.");
    insert(output);
end

rule "Suspicious IP collected, block account"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "no", helpdeskVerified == "null", reversalPossible == "null")
then
     AlertResponse output = new AlertResponse("conclusion",
                                                 null,
                                                 new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                                 $input,
                                                 "conclusion",
                                                 "Since the action was verified as legitimate by the user, classify this as a false positive.");
        insert(output);
end


// User verified by Helpdesk, classify as false positive
rule "User verified by Helpdesk, classify as false positive"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "yes", helpdeskVerified == "yes", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.CLASSIFY_FP),
                                             $input,
                                             "conclusion",
                                             "Helpdesk verification confirms the user, so classify as a false positive.");
    insert(output);
end

// Helpdesk does not verify user, attempt reversal
rule "Helpdesk does not verify user, attempt reversal"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "yes", helpdeskVerified == "no", reversalPossible == "null")
then
    AlertResponse output = new AlertResponse("question",
                                             new Question("multiple-choice",
                                                          "\nCan the change be reversed?",
                                                          Arrays.asList("Yes", "No")),
                                             null,
                                             $input,
                                             "reversalPossible",
                                             "Attempt to reverse the change if it’s unauthorized.");
    insert(output);
end

// Reversal confirmed, suggest password change and alert
rule "Reversal confirmed, suggest password change and alert"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "yes", helpdeskVerified == "no", reversalPossible == "yes")
then
    AlertResponse output = new AlertResponse("conclusion",
                                                 null,
                                                 new Conclusion(Conclusion.RESET_PASSWORD_REVOKE_TOKENS),
                                                 $input,
                                                 "conclusion",
                                                 "Since the change can be reversed, suggest a password change and revoke any tokens.");
        insert(output);
end

// Reversal not possible, block account
rule "Reversal not possible, block account"
when
    $input: EvidencesUDC(alertId == "UDC",  userKnown != "null", legitimateAction != "yes", ipCollected == "yes", helpdeskVerified == "no", reversalPossible == "no")
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.BLOCK_ACCOUNT),
                                             $input,
                                             "conclusion",
                                             "Since the reversal was not possible and the user couldn't be verified, proceed with blocking the account.");
    insert(output);
end
//================================================================================================

//================================================================================================


rule "Default: Unknown response or invalid step"
when
    not EvidencesSLA()
then
    AlertResponse output = new AlertResponse("conclusion",
                                             null,
                                             new Conclusion(Conclusion.UNKNOWN),
                                             null,
                                             "conclusion",
                                             "The response provided is invalid or the step is unknown. Please try again.");
    insert(output);
end